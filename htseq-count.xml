<tool id="htseq_count" name="htseq-count" version="0.6.1galaxy1">
    <description> - Count aligned reads in a BAM file that overlap features in a GFF file</description>
    <requirements>
        <requirement type="package" version="0.6.1">htseq</requirement>
        <requirement type="package" version="1.7.1">numpy</requirement>
        <requirement type="package" version="0.1.19">samtools</requirement>
        <requirement type="package" version="0.7.7">pysam</requirement>
    </requirements>

    <stdio>
        <exit_code range="1:" level="fatal" description="Unknown error occurred" />
        <regex match="htseq-count: (command ){0,1}not found" source="stderr" level="fatal" description="The HTSeq python package is not properly installed, contact Galaxy administrators" />
        <regex match="samtools: (command ){0,1}not found" source="stderr" level="fatal" description="The samtools package is not properly installed, contact Galaxy administrators" />
        <regex match="Error: Feature (.+) does not contain a '(.+)' attribute" source="both" level="fatal" description="Error parsing the GFF file, at least one feature of the specified 'Feature type' does not have a value for the specified 'ID Attribute'" />
        <regex match="Error occured in line (\d+) of file" source="stderr" level="fatal" description="Unknown error parsing the GFF file" />
        <regex match="Error" source="stderr" level="fatal" description="Unknown error occured" />
        <regex match="Warning: Read (.+) claims to have an aligned mate which could not be found. \(Is the SAM file properly sorted\?\)" source="stderr" level="warning" description="PAIRED DATA MISSING OR NOT PROPERLY SORTED. Try reruning and selecting the option to 'Force sorting of SAM/BAM file by NAME'. See stderr output of this dataset for more information." />
    </stdio>

    <version_command>htseq-count -h | grep version | sed 's/^\(.*\)*\(version .*\)\./\2/'</version_command>

    <command><![CDATA[
    ##set up input files
    #set $reference_fasta_filename = "localref.fa"
    #if $samout_conditional.samout:
        #if str( $samout_conditional.reference_source.reference_source_selector ) == "history":
            ln -s "${samout_conditional.reference_source.ref_file}" "${reference_fasta_filename}" &&
            samtools faidx "${reference_fasta_filename}" 2>&1 || echo "Error running samtools faidx for htseq-count" >&2 &&
        #else:
            #set $reference_fasta_filename = str( $samout_conditional.reference_source.ref_file.fields.path )
        #end if
    #end if
    #if $force_sort:
        #if $samfile.extension == 'bam':
            samtools sort -n "$samfile" "name_sorted_alignment" &&
        #else
            samtools view -Su -t ${reference_fasta_filename}.fai "$samfile" | samtools sort -n - "name_sorted_alignment" &&
        #end if
    #end if
    htseq-count
    --mode=$mode
    --stranded=$stranded
    --minaqual=$minaqual
    --type="$featuretype"
    --idattr="$idattr"
    #if $samout_conditional.samout:
        --samout=$__new_file_path__/${samoutfile.id}_tmp
    #end if
    #if $force_sort:
        --order=name
        --format=bam
        name_sorted_alignment.bam
    #else
        --order=pos
        --format=$samfile.extension
        $samfile
    #end if
    "$gfffile"
    | awk '{if ($1 ~ "no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique") print $0 | "cat 1>&2"; else print $0}' > $counts 2>$othercounts
    #if $samout_conditional.samout:
        && samtools view -Su -t ${reference_fasta_filename}.fai $__new_file_path__/${samoutfile.id}_tmp | samtools sort -o - sorted > $samoutfile
    #end if
    ]]>
    </command>

    <inputs>
        <param format="sam,bam" name="samfile" type="data" label="Aligned SAM/BAM File"/>
        <param format="gff" name="gfffile" type="data" label="GFF File"/>
        <param name="mode" type="select" label="Mode" help="(--mode)">
            <help>Mode to handle reads overlapping more than one feature.</help>
            <option value="union" selected="true">Union</option>
            <option value="intersection-strict">Intersection (strict)</option>
            <option value="intersection-nonempty">Intersection (nonempty)</option>
        </param>
        <param name="stranded" type="select" label="Stranded" help="dUTP, NSR, and NNSR (e.g.: Illumina TruSeq Stranded mRNA Library Prep) are reverse if mapping was done using fr-firstrand library type. SOLID or ligation (e.g.: Epicentre ScriptSeq) are Yes if mapping was done using fr-secondstrand library type (--stranded)">
            <help>Specify whether the data is from a strand-specific assay. 'Reverse' means yes with reversed strand interpretation.dUTP, NSR, and NNSR (e.g.: Illumina TruSeq Stranded mRNA Library Prep) are reverse if mapping was done using fr-firstrand library type. SOLID or ligation (e.g.: Epicentre ScriptSeq) are Yes if mapping was done using fr-secondstrand library type.</help>
            <option value="yes" selected="true">Yes</option>
            <option value="no">No</option>
            <option value="reverse">Reverse</option>
        </param>
        <param name="minaqual" type="integer" value="10" label="Minimum alignment quality">
            <help>Skip all reads with alignment quality lower than the given minimum value. (-minaqual)</help>
        </param>
        <param name="featuretype" type="text" value="exon" label="Feature type">
            <help>Feature type (3rd column in GFF file) to be used. All features of other types are ignored. The default, suitable for RNA-Seq and Ensembl GTF files, is exon. (--type)</help>
        </param>
        <param name="idattr" type="text" value="gene_id" label="ID Attribute">
            <help>GFF attribute to be used as feature ID. Several GFF lines with the same feature ID will be considered as parts of the same feature. The feature ID is used to identity the counts in the output table. All features of the specified type MUST have a value for this attribute. The default, suitable for RNA-Seq and Ensembl GTF files, is gene_id.</help>
        </param>
        <conditional name="samout_conditional">
            <param name="samout" type="boolean" value="False" truevalue="True" falsevalue="False" label="Additional BAM Output">
                <help>Write out all SAM alignment records into an output BAM file, annotating each line with its assignment to a feature or a special counter (as an optional field with tag ‘XF’).</help>
            </param>
            <when value="True">
                <conditional name="reference_source">
                    <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
                        <option value="cached">Locally cached</option>
                        <option value="history">History</option>
                    </param>
                    <when value="cached">
                        <param name="ref_file" type="select" label="Using reference genome">
                            <options from_data_table="sam_fa_indexes">
                                <filter type="data_meta" key="dbkey" ref="samfile" column="1"/>
                            </options>
                            <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
                        </param>
                    </when>
                    <when value="history"> <!-- FIX ME!!!! -->
                        <param name="ref_file" type="data" format="fasta" label="Using reference file" />
                    </when>
                </conditional>
            </when>
        </conditional>
        <param name="force_sort" type="boolean" value="False" truevalue="True" falsevalue="False" label="Force sorting of SAM/BAM file by NAME">
            <help>This option can be used for for paired-end data that has many unmapped mates. Use this if you get the warning about paired end data missing or not being properly sorted.</help>
        </param>
    </inputs>

    <outputs>
        <data format="tabular" name="counts" metadata_source="samfile" label="${tool.name} on ${on_string}"/>
        <data format="tabular" name="othercounts" metadata_source="samfile" label="${tool.name} on ${on_string} (no feature)"/>
        <data format="bam" name="samoutfile" metadata_source="samfile" label="${tool.name} on ${on_string} (BAM)">
            <filter>samout_conditional['samout']</filter>
        </data>
    </outputs>

    <tests>
        <test>
            <param name="samfile" value="htseq-test.sam" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="False" />
            <output name="counts" file="htseq-test_counts.tsv" />
            <output name="othercounts" file="htseq-test_othercounts.tsv" />
        </test>
        <test>
            <param name="samfile" value="htseq-test.sam" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="False" />
            <param name="force_sort" value="True" />
            <output name="counts" file="htseq-test_counts.tsv" />
            <output name="othercounts" file="htseq-test_othercounts.tsv" />
        </test>
        <test>
            <param name="samfile" value="htseq-test.bam" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="False" />
            <output name="counts" file="htseq-test_counts.tsv" />
            <output name="othercounts" file="htseq-test_othercounts.tsv" />
        </test>
        <test>
            <param name="samfile" value="htseq-test-paired.bam" />
            <param name="singlepaired" value="paired" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="False" />
            <output name="counts" file="htseq-test-paired_counts.tsv" />
            <output name="othercounts" file="htseq-test-paired_othercounts.tsv" />
        </test>
        <test>
            <param name="samfile" value="htseq-test-paired.bam" />
            <param name="singlepaired" value="paired" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="False" />
            <param name="force_sort" value="True" />
            <output name="counts" file="htseq-test-paired_counts.tsv" />
            <output name="othercounts" file="htseq-test-paired_othercounts.tsv" />
        </test>

        <!-- Seems to be an issue setting the $reference_fasta_filename variable during test
        <test>
            <param name="samfile" value="htseq-test.sam" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="True" />
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" value="htseq-test_reference.fasta" />
            <output name="counts" file="htseq-test_counts.tsv" />
            <output name="othercounts" file="htseq-test_othercounts.tsv" />
            <output name="samoutfile" file="htseq-test_samout.bam" />
        </test>
        -->
    </tests>

    <help>
<![CDATA[
Overview
--------

This tool takes an alignment file in SAM or BAM format and feature file in GFF format
and calculates the number of reads mapping to each feature. It uses the *htseq-count*
script that is part of the HTSeq python module. See
http://www-huber.embl.de/users/anders/HTSeq/doc/count.html for details.

A feature is an interval (i.e., a range of positions) on a chromosome or a union of
such intervals.  In the case of RNA-Seq, the features are typically genes, where
each gene is considered here as the union of all its exons. One may also consider
each exon as a feature, e.g., in order to check for alternative splicing. For
comparative ChIP-Seq, the features might be binding regions from a pre-determined
list.


Overlap Modes
-------------

Special care must be taken to decide how to deal with reads that overlap more than one feature.

The htseq-count script allows to choose between three modes: *union*, *intersection-strict*, and *intersection-nonempty*.

The following figure illustrates the effect of these three modes:

.. image:: count_modes.png


Strandedness
------------

**Important**: The default for strandedness is yes. If your RNA-Seq data has not been made with a strand-specific protocol, this causes half of the reads to be lost. Hence, make sure to set the option Stranded to 'No' unless you have strand-specific data!


Output
------

The script outputs a table with counts for each feature, followed by the special counters, which count reads that were not counted for any feature for various reasons, namely

- *no_feature*: reads which could not be assigned to any feature (set S as described above was empty).

- *ambiguous*: reads which could have been assigned to more than one feature and hence were not counted for any of these (set S had mroe than one element).

- *too_low_aQual*: reads which were not counted due to the -a option, see below

- *not_aligned*: reads in the SAM file without alignment

- *alignment_not_unique*: reads with more than one reported alignment. These reads are recognized from the NH optional SAM field tag. (If the aligner does not set this field, multiply aligned reads will be counted multiple times.)


Options Summary
---------------

Usage: htseq-count [options] sam_file gff_file

This script takes an alignment file in SAM format and a feature file in GFF
format and calculates for each feature the number of reads mapping to it. See
http://www-huber.embl.de/users/anders/HTSeq/doc/count.html for details.

Options:
  -h, --help            show this help message and exit
  -m MODE, --mode=MODE  mode to handle reads overlapping more than one
                        feature(choices: union, intersection-strict,
                        intersection-nonempty; default: union)
  -s STRANDED, --stranded=STRANDED
                        whether the data is from a strand-specific assay.
                        Specify 'yes', 'no', or 'reverse' (default: yes).
                        'reverse' means 'yes' with reversed strand
                        interpretation
  -a MINAQUAL, --minaqual=MINAQUAL
                        skip all reads with alignment quality lower than the
                        given minimum value (default: 0)
  -t FEATURETYPE, --type=FEATURETYPE
                        feature type (3rd column in GFF file) to be used, all
                        features of other type are ignored (default, suitable
                        for Ensembl GTF files: exon)
  -i IDATTR, --idattr=IDATTR
                        GFF attribute to be used as feature ID (default,
                        suitable for Ensembl GTF files: gene_id)
  -o SAMOUT, --samout=SAMOUT
                        write out all SAM alignment records into an output SAM
                        file called SAMOUT, annotating each line with its
                        feature assignment (as an optional field with tag
                        'XF')
  -q, --quiet           suppress progress report and warnings

Written by Simon Anders (sanders@fs.tum.de), European Molecular Biology
Laboratory (EMBL). (c) 2010. Released under the terms of the GNU General
Public License v3. Part of the 'HTSeq' framework.
]]>
    </help>

    <citations>
        <citation type="bibtex">
@article{anders_htseqpython_2015,
    title = {{HTSeq}—a {Python} framework to work with high-throughput sequencing data},
    volume = {31},
    issn = {1367-4803, 1460-2059},
    url = {http://bioinformatics.oxfordjournals.org/content/31/2/166},
    doi = {10.1093/bioinformatics/btu638},
    abstract = {Motivation: A large choice of tools exists for many standard tasks in the analysis of high-throughput sequencing (HTS) data. However, once a project deviates from standard workflows, custom scripts are needed.
Results: We present HTSeq, a Python library to facilitate the rapid development of such scripts. HTSeq offers parsers for many common data formats in HTS projects, as well as classes to represent data, such as genomic coordinates, sequences, sequencing reads, alignments, gene model information and variant calls, and provides data structures that allow for querying via genomic coordinates. We also present htseq-count, a tool developed with HTSeq that preprocesses RNA-Seq data for differential expression analysis by counting the overlap of reads with genes.
Availability and implementation: HTSeq is released as an open-source software under the GNU General Public Licence and available from http://www-huber.embl.de/HTSeq or from the Python Package Index at https://pypi.python.org/pypi/HTSeq.
Contact: sanders\{at\}fs.tum.de},
    language = {en},
    number = {2},
    urldate = {2015-04-21},
    journal = {Bioinformatics},
    author = {Anders, Simon and Pyl, Paul Theodor and Huber, Wolfgang},
    month = jan,
    year = {2015},
    pmid = {25260700},
    pages = {166--169},
    file = {Full Text PDF:/Users/lparsons/Library/Application Support/Firefox/Profiles/thd2t4je.default/zotero/storage/84XQB8V6/Anders et al. - 2015 - HTSeq—a Python framework to work with high-through.pdf:application/pdf;Snapshot:/Users/lparsons/Library/Application Support/Firefox/Profiles/thd2t4je.default/zotero/storage/JKUAUCKB/166.html:text/html}
}
        </citation>
    </citations>
</tool>
